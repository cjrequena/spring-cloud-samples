openapi: 3.0.3
info:
  title: Account Service API
  description: A REST API for managing bank accounts with operations for CRUD operations and account transactions (deposit/withdraw)
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:8080/account-service/api
    description: Development server
  - url: https://api.example.com/account-service/api
    description: Production server

paths:
  /accounts:
    post:
      summary: Create a new account
      description: Creates a new bank account with the specified owner and initial balance
      operationId: create
      x-extra-args:
        - { name: "request", type: "javax.servlet.http.HttpServletRequest" }
        - { name: "ucBuilder", type: "org.springframework.web.util.UriComponentsBuilder" }
      parameters:
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
          description: API version header
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDTO'
            example:
              owner: "John Doe"
              balance: 1000.00
      responses:
        '201':
          description: Account created successfully
          headers:
            Location:
              description: URI of the created account
              schema:
                type: string
                format: uri
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Account creation conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Retrieve all accounts
      description: Returns a list of all bank accounts
      operationId: retrieve
      parameters:
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
      responses:
        '200':
          description: List of accounts retrieved successfully
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDTO'
              example:
                - id: "550e8400-e29b-41d4-a716-446655440000"
                  owner: "John Doe"
                  balance: 1000.00
                - id: "550e8400-e29b-41d4-a716-446655440001"
                  owner: "Jane Smith"
                  balance: 2500.50

  /accounts/{id}:
    get:
      summary: Retrieve account by ID
      description: Returns a specific bank account by its unique identifier
      operationId: retrieveById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier of the account
          example: "550e8400-e29b-41d4-a716-446655440000"
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
      responses:
        '200':
          description: Account retrieved successfully
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                owner: "John Doe"
                balance: 1000.00
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing account
      description: Updates an existing bank account with new owner and/or balance information
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier of the account to update
          example: "550e8400-e29b-41d4-a716-446655440000"
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDTO'
            example:
              owner: "John Doe Updated"
              balance: 1500.00
      responses:
        '204':
          description: Account updated successfully
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Optimistic concurrency conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an account
      description: Deletes a bank account by its unique identifier
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier of the account to delete
          example: "550e8400-e29b-41d4-a716-446655440000"
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
      responses:
        '204':
          description: Account deleted successfully
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/deposit:
    post:
      summary: Deposit money to an account
      description: Deposits a specified amount of money to an existing account
      operationId: deposit
      parameters:
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositAccountDTO'
            example:
              accountId: "550e8400-e29b-41d4-a716-446655440000"
              amount: 500.00
      responses:
        '204':
          description: Deposit completed successfully
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
        '400':
          description: Invalid request data or optimistic concurrency error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/withdraw:
    post:
      summary: Withdraw money from an account
      description: Withdraws a specified amount of money from an existing account
      operationId: withdraw
      parameters:
        - name: Accept-Version
          in: header
          required: true
          schema:
            type: string
            example: "application/vnd.sample.service.v1+json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawAccountDTO'
            example:
              accountId: "550e8400-e29b-41d4-a716-446655440000"
              amount: 200.00
      responses:
        '204':
          description: Withdrawal completed successfully
          headers:
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "no store, private, max-age=0"
        '400':
          description: Invalid request data, insufficient funds, or optimistic concurrency error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AccountDTO:
      type: object
      required:
        - owner
        - balance
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the account
          readOnly: true
          example: "550e8400-e29b-41d4-a716-446655440000"
        owner:
          type: string
          description: Name of the account owner
          minLength: 1
          maxLength: 255
          example: "John Doe"
        balance:
          type: number
          format: bigdecimal
          description: Current balance of the account
          minimum: 0
          example: 1000.00
        created_at:
          type: string
          format: date
          readOnly: true
          x-field-extra-annotation: |
            @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.cjrequena.sample.dto.serializer.LocalDateSerializer.class)
            @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = com.cjrequena.sample.dto.serializer.LocalDateDeserializer.class)
            @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
            @com.fasterxml.jackson.annotation.JsonFormat(shape = com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm")
          updated_at:
            type: string
            format: date
            readOnly: true
            x-field-extra-annotation: |
              @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.cjrequena.sample.dto.serializer.LocalDateSerializer.class)
              @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = com.cjrequena.sample.dto.serializer.LocalDateDeserializer.class)
              @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
              @com.fasterxml.jackson.annotation.JsonFormat(shape = com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm")
      example:
        id: "550e8400-e29b-41d4-a716-446655440000"
        owner: "John Doe"
        balance: 1000.00
        created_at: "2024-01-15"
        updated_at: "2024-09-19"

    DepositAccountDTO:
      type: object
      required:
        - accountId
        - amount
      properties:
        accountId:
          type: string
          format: uuid
          description: Unique identifier of the account to deposit to
          example: "550e8400-e29b-41d4-a716-446655440000"
        amount:
          type: number
          format: bigdecimal
          description: Amount to deposit
          minimum: 0.01
          example: 500.00
      example:
        accountId: "550e8400-e29b-41d4-a716-446655440000"
        amount: 500.00

    WithdrawAccountDTO:
      type: object
      required:
        - accountId
        - amount
      properties:
        accountId:
          type: string
          format: uuid
          description: Unique identifier of the account to withdraw from
          example: "550e8400-e29b-41d4-a716-446655440000"
        amount:
          type: number
          format: bigdecimal
          description: Amount to withdraw
          minimum: 0.01
          example: 200.00
      example:
        accountId: "550e8400-e29b-41d4-a716-446655440000"
        amount: 200.00

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
          example: "2025-01-15T10:30:00Z"
        status:
          type: integer
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Error type
          example: "Not Found"
        message:
          type: string
          description: Detailed error message
          example: "Account with ID 550e8400-e29b-41d4-a716-446655440000 not found"
        path:
          type: string
          description: API endpoint path where the error occurred
          example: "/account-service/api/accounts/550e8400-e29b-41d4-a716-446655440000"

  parameters:
    AcceptVersionHeader:
      name: Accept-Version
      in: header
      required: true
      schema:
        type: string
        example: "application/vnd.sample.service.v1+json"
      description: API version header

    AccountId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the account
      example: "550e8400-e29b-41d4-a716-446655440000"

  responses:
    NoContent:
      description: Operation completed successfully
      headers:
        Cache-Control:
          description: Cache control header
          schema:
            type: string
            example: "no store, private, max-age=0"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Conflict with current state of resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
