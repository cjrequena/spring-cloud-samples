server.servlet.context-path: / # Context path of the application.
server.compression.enabled: true
server.compression.mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size: 1024
server.http2.enabled: true
server.port: ${SERVER_PORT:8080}

spring.application.name: '@project.artifactId@'
spring.application.version: '@project.version@'
spring.profiles.active: ${SPRING_PROFILES_ACTIVE:local}
spring.main.allow-bean-definition-overriding: true # Enable bean override

---
spring.config.activate.on-profile: local

# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------
# ENDPOINTS WEB CONFIGURATION
management.endpoints.web.exposure.include: '*' # Endpoint IDs that should be included or '*' for all.
management.endpoints.web.exposure.exclude:  # Endpoint IDs that should be excluded or '*' for all.
management.endpoints.web.base-path: /management # Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.
management.endpoints.web.path-mapping.health: healthcheck

# HEALTH ENDPOINT
management.endpoint.health.cache.time-to-live: 0ms # Maximum time that a response can be cached.
management.endpoint.health.enabled: true # Whether to enable the health endpoint.
management.endpoint.health.roles:  # Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.
management.endpoint.health.show-details: always # When to show full health details.

# INFO CONTRIBUTORS (InfoContributorProperties)
management.info.build.enabled: true # Whether to enable build info.
management.info.defaults.enabled: true # Whether to enable default info contributors.
management.info.env.enabled: true # Whether to enable environment info.
management.info.git.enabled: true # Whether to enable git info.
management.info.git.mode: full # Mode to use to expose git information.

#------------------------------
# SPRING CLOUD STREAM
#------------------------------
# https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/
#spring.cloud.function.definition: consumer1, consumer2
spring.cloud.function.definition: consumer1
spring.cloud.stream:
  defaultBinder: my-kafka-binder-01
  default:
    content-type: application/json
  bindings:
    consumer1-in-0:
      binder: my-kafka-binder-01
      destination: spring-cloud-stream-kafka-sample-01
      group: group-1
      content-type: application/json
    consumer2-in-0:
      binder: my-kafka-binder-01
      destination: spring-cloud-stream-kafka-sample-01
      group: group-1
      content-type: application/json
  binders:
    my-kafka-binder-01:
      type: kafka
      environment:
        spring.cloud.stream.kafka.binder:
          brokers: "localhost:9092"
        spring.cloud.stream.kafka.bindings:
          consumer1-in-0:
            consumer:
              configuration:
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
          consumer2-in-0:
            consumer:
              configuration:
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
    my-kafka-binder-02: # A binder with schema registry configuration
      type: kafka
      environment:
        spring.cloud.stream.kafka.binder:
          brokers: "localhost:9092"
          consumer-properties:
            schema.registry.url: http://localhost:8081
            id.compatibility.strict: true
            json.fail.invalid.schema: false
            json.fail.unknown.properties: false
        spring.cloud.stream.kafka.bindings:
          consumer1-in-0:
            consumer:
              configuration:
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value.deserializer: io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
          consumer2-in-0:
            consumer:
              configuration:
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value.deserializer: io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
spring.cloud.sleuth:
  json:
    enabled: false

# SPRINGDOC :: SWAGGER
springdoc:
  api-docs:
    groups.enabled: true
  swagger-ui:
    disable-swagger-default-url: true
    path: /swagger
    display-request-duration: true
    groups-order: DESC
    operations-sorter: alpha
    tags-sorter: alpha

# LOGGING
logging.config: classpath:log4j2.xml # Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.
logging.level: # Log levels severity mapping. For instance, `logging.level.org.springframework: DEBUG`.
  org.springframework: INFO
  com.cjrequena.sample: DEBUG
