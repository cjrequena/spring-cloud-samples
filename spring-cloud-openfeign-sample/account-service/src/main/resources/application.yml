server.servlet.context-path: / # Context path of the application.
server.port: ${SERVER_PORT:8080} # Server HTTP port.
spring.application.name: '@project.artifactId@'
spring.application.version: '@project.version@'
spring.profiles.active: ${SPRING_PROFILES_ACTIVE:local}
spring.main.allow-bean-definition-overriding: true # Enable bean override

spring.cloud.consul:
  host: ${SPRING_CLOUD_CONSUL_HOST:localhost}
  port: ${SPRING_CLOUD_CONSUL_PORT:8500}
  enabled: ${SPRING_CLOUD_CONSUL_ENABLED:true}
  discovery:
    # Service name
    serviceName: ${spring.application.name}
    # Unique service instance id
    instanceId: ${spring.application.name}:${server.port}
    # Is service discovery enabled?
    enabled: ${SPRING_CLOUD_CONSUL_DISCOVERY_ENABLED:true}
    # Register as a service in consul.
    register: ${SPRING_CLOUD_CONSUL_DISCOVERY_REGISTER:true}
    # Register health check in consul. Useful during development of a service.
    registerHealthCheck: ${SPRING_CLOUD_CONSUL_DISCOVERY_REGISTER_HEALTH_CHECK:true}
    # Alternate server path to invoke for health checking
    healthCheckPath: /management/healthcheck
    # Custom health check url to override default
    #healthCheckUrl: ${SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_URL}
    # How often to perform the health check (e.g. 10s), defaults to 10s.
    healthCheckInterval: ${SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_INTERVAL:15s}
    # Timeout for health check (e.g. 10s).
    healthCheckTimeout: ${SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_TIMEOUT:15s}
    # Timeout to deregister services critical for longer than timeout (e.g. 30m).
    healthCheckCriticalTimeout: ${SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_CRITICAL_TIMEOUT:10m}
    # Tags to use when registering service
    tags: project_name=${spring.application.name}, maven_version=${project.version}, commit_id=${git.commit.id}, commit_time=${git.commit.time}, profiles_active=${spring.profiles.active}
    # Hostname to use when accessing server.
    hostname: ${SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME:localhost}
    # Use ip address rather than hostname during registration
    prefer-ip-address: ${SPRING_CLOUD_CONSUL_DISCOVERY_PREFER_IP_ADDRESS:true}
    # IP address to use when accessing service (must also set preferIpAddress to use)
    ipAddress: ${SPRING_CLOUD_CONSUL_DISCOVERY_IPADDRESS:127.0.0.1}
    # Port to register the service under (defaults to listening port)
    #port: ${SPRING_CLOUD_CONSUL_DISCOVERY_PORT}

spring.config.import: "optional:configserver:${CONFIG_SERVER:http://localhost:8888}/"
spring.cloud.config:
  # Flag to say that remote configuration is enabled. (default false).
  enabled: ${SPRING_CLOUD_CONFIG_ENABLED:true}
  # Flag to indicate that failure to connect to the server is fatal (default false).
  failFast: ${SPRING_CLOUD_CONFIG_FAIL_FAST:true}

# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------
# ENDPOINTS WEB CONFIGURATION
management.endpoints.web.exposure.include: '*' # Endpoint IDs that should be included or '*' for all.
management.endpoints.web.exposure.exclude:  # Endpoint IDs that should be excluded or '*' for all.
management.endpoints.web.base-path: /management # Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.
management.endpoints.web.path-mapping.health: healthcheck
# HEALTH ENDPOINT
management.endpoint.health.cache.time-to-live: 0ms # Maximum time that a response can be cached.
management.endpoint.health.enabled: true # Whether to enable the health endpoint.
management.endpoint.health.roles:  # Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.
management.endpoint.health.show-details: always # When to show full health details.
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: true
# INFO CONTRIBUTORS (InfoContributorProperties)
management.info.build.enabled: true # Whether to enable build info.
management.info.defaults.enabled: true # Whether to enable default info contributors.
management.info.env.enabled: true # Whether to enable environment info.
management.info.git.enabled: true # Whether to enable git info.
management.info.git.mode: full # Mode to use to expose git information.

---
spring.config.activate.on-profile: local

# Postgres
spring.datasource.postgres.type: com.zaxxer.hikari.HikariDataSource
spring.datasource.postgres.jdbcUrl: jdbc:postgresql://${POSTGRES_HOST:localhost}:5432/postgres
spring.datasource.postgres.driver-class-name: org.postgresql.Driver
spring.datasource.postgres.username: postgres
spring.datasource.postgres.password: postgres
spring.datasource.testOnBorrow: true
spring.datasource.validationQuery: SELECT 1

# https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
spring.datasource.postgres.pool-name: HikariPool
spring.datasource.postgres.connection-timeout: 20000
spring.datasource.postgres.minimum-idle: 5
spring.datasource.postgres.maximum-pool-size: 12
spring.datasource.postgres.idle-timeout: 300000
spring.datasource.postgres.max-lifetime: 1200000
spring.datasource.postgres.auto-commit: false


# JPA specific configs
spring.jpa.open-in-view: false
#spring.jpa.properties.hibernate.connection.provider_class: org.hibernate.hikaricp.internal.HikariCPConnectionProvider
spring.jpa.database-platform: org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.show_sql: false
spring.jpa.properties.hibernate.format_sql: true
spring.jpa.properties.hibernate.use_sql: true
spring.jpa.properties.hibernate.hibernate.dialect: true
spring.jpa.properties.hibernate.id.new_generator_mappings: false
spring.jpa.properties.hibernate.search.autoregister_listeners: false
spring.jpa.properties.hibernate.bytecode.use_reflection_optimizer: false
spring.jpa.properties.hibernate.default_schema: s_account


spring.flyway.enabled: true
spring.flyway.locations: classpath:/db/migration
spring.flyway.schemas: s_account
